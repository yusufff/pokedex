{"version":3,"sources":["components/Header/index.js","services/api.js","components/Pokemon/index.js","pages/Pokemons/index.js","App.js","services/history.js","serviceWorker.js","index.js"],"names":["Header","props","className","exact","to","forageStore","localforage","createInstance","driver","INDEXEDDB","name","this","api","setup","cache","store","maxAge","exclude","query","defaults","headers","url","params","get","TypeColors","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","unknown","shadow","Pokemon","React","useState","loading","setLoading","state","setState","useEffect","a","Api","pokemon","data","fetchData","src","sprites","front_default","alt","id","types","map","i","type","key","style","abilities","ability","charAt","toUpperCase","slice","join","Pokemons","fetching","next","count","pokemons","componentDidMount","prevState","results","fetchNext","onClick","Component","App","path","component","Ball","createBrowserHistory","Boolean","window","location","hostname","match","ReactDOM","render","history","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a3c0c861.chunk.js","sourcesContent":["import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport './styles/Header.css';\n\nconst Header = props => {\n\treturn (\n\t\t<header className=\"header\">\n\t\t\t<div className=\"logo\">\n\t\t\t\t<NavLink exact to=\"/\">POKEDEX</NavLink>\n\t\t\t</div>\n\t\t\t<nav className=\"nav\">\n\t\t\t\t<NavLink exact to=\"/\">Pokemons</NavLink>\n\t\t\t\t<NavLink exact to=\"/ball\">My Pok√© Ball</NavLink>\n\t\t\t</nav>\n\t\t</header>\n\t)\n}\n\nexport default Header;\n","import localforage from 'localforage';\nimport { setup } from 'axios-cache-adapter'\n\nclass Api {\n\tconstructor() {\n\t\tconst forageStore = localforage.createInstance({\n\t\t\tdriver: [\n\t\t\t\tlocalforage.INDEXEDDB,\n\t\t\t],\n\t\t\tname: 'pokedex-cache'\n\t\t});\n\n\t\tthis.api = setup({\n\t\t\tcache: {\n\t\t\t\tstore: forageStore,\n        maxAge: 30 * 60 * 1000,\n        exclude: {\n          query: false\n        },\n    \t},\n\t\t});\n\n\t\tthis.api.defaults.headers['Content-Type'] = 'application/json';\n\t}\n\n\t/**\n\t * Generic\n\t */\n\tget(url, params) {\n\t\treturn this.api.get(url, { params });\n\t}\n\n\t/**\n\t * Pokemons\n\t */\n\tgetPokemons(params) {\n\t\treturn this.api.get('https://pokeapi.co/api/v2/pokemon', { params });\n\t}\n\tgetPokemon(name, params) {\n\t\treturn this.api.get(`https://pokeapi.co/api/v2/pokemon/${name}`, { params });\n\t}\n}\n\nexport default new Api();\n","import React from 'react';\n\nimport Api from '../../services/api';\n\nimport './styles/Pokemon.css';\n\nconst TypeColors = {\n\tnormal: '#EF5350',\n\tfighting: '#ec407a',\n\tflying: '#ab47bc',\n\tpoison: '#7e57c2',\n\tground: '#5c6bc0',\n\trock: '#42a5f5',\n\tbug: '#29b6f6',\n\tghost: '#C4D0D6',\n\tsteel: '#26c6da',\n\tfire: '#26a69a',\n\twater: '#66bb6a',\n\tgrass: '#9ccc65',\n\telectric: '#d4e157',\n\tpsychic: '#ffee58',\n\tice: '#ffca28',\n\tdragon: '#ffa726',\n\tdark: '#ff7043',\n\tfairy: '#8d6e63',\n\tunknown: '#bdbdbd',\n\tshadow: '#78909c',\n}\n\nconst Pokemon = ({ name, url }) => {\n\tconst [loading, setLoading] = React.useState(true);\n\tconst [state, setState] = React.useState({});\n\n\tReact.useEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tsetLoading(true);\n\t\t\tconst pokemon = await Api.get(url);\n\t\t\tsetState(pokemon.data);\n\t\t\tsetLoading(false);\n\t\t}\n\t\tfetchData();\n\t}, [url]);\n\n\treturn loading ? (\n\t\t<div className=\"pokemon\">\n\t\t\tLoading...\n\t\t</div>\n\t) : (\n\t\t<div className=\"pokemon\">\n\t\t\t<div className=\"pokemon-image\">\n\t\t\t\t<img src={state.sprites.front_default} alt={state.name || name} />\n\t\t\t</div>\n\t\t\t<div className=\"pokemon-name\">{state.name} - #{state.id}</div>\n\t\t\t<div className=\"pokemon-types\">\n\t\t\t\t{state.types.map(({ type }, i) => (\n\t\t\t\t\t<div key={i} className=\"pokemon-type\" style={{ '--typeColor': TypeColors[type.name] }}>{type.name}</div>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t\t<div className=\"pokemon-abilities\">\n\t\t\t\t<span className=\"pokemon-stats-title\">Abilities</span>\n\t\t\t\t<div className=\"pokemon-ability-list\">{state.abilities.map(({ ability }) => ability.name.charAt(0).toUpperCase() + name.slice(1)).join(', ')} </div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default Pokemon;\n","import React from 'react';\n\nimport Pokemon from '../../components/Pokemon';\n\nimport Api from '../../services/api';\n\nimport './styles/Pokemons.css';\n\nclass Pokemons extends React.Component {\n\tstate = {\n\t\tfetching: true,\n\t\tnext: null,\n\t\tcount: 0,\n\t\tpokemons: [],\n\t}\n\n\tcomponentDidMount = () => {\n\t\tthis.fetchData();\n\t}\n\n\tfetchData = async (url) => {\n\t\tthis.setState({\n\t\t\tfetching: true,\n\t\t})\n\t\tconst { data } = await Api.get(url || 'https://pokeapi.co/api/v2/pokemon');\n\t\tthis.setState(prevState => ({\n\t\t\tfetching: false,\n\t\t\tnext: data.next,\n\t\t\tcount: data.count,\n\t\t\tpokemons: [...prevState.pokemons, ...data.results],\n\t\t}))\n\t}\n\n\tfetchNext = () => {\n\t\tthis.fetchData(this.state.next);\n\t}\n\n\trender() {\n\t\tconst { fetching, next, pokemons } = this.state;\n\n\t\treturn (\n\t\t\t<section className=\"pokemons\">\n\t\t\t\t{pokemons.map((pokemon, i) => <Pokemon key={`pokemon-${i}`} {...pokemon} />)}\n\t\t\t\t{next && !fetching &&\n\t\t\t\t\t<div className=\"pokemons-next\" onClick={this.fetchNext}>Load More</div>\n\t\t\t\t}\n\t\t\t</section>\n\t\t)\n\t}\n}\n\nexport default Pokemons;\n","import React from 'react';\nimport { Route } from 'react-router-dom';\n\nimport Header from './components/Header';\n\nimport Pokemons from './pages/Pokemons';\nimport Pokemon from './pages/Pokemons/Detail';\nimport Ball from './pages/Ball';\n\nimport './App.css';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Header />\n\t\t\t\n\t\t\t<Route exact path=\"/\" component={Pokemons} />\n\t\t\t<Route path=\"/pokemon/:id\" component={Pokemon} />\n\t\t\t<Route path=\"/ball\" component={Ball} />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import { createBrowserHistory } from 'history';\n\nexport default createBrowserHistory()","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router } from 'react-router-dom';\n\nimport App from './App';\n\nimport history from './services/history';\n\nimport * as serviceWorker from './serviceWorker';\nimport 'normalize.css';\n\nReactDOM.render(\n\t<Router history={history}>\n\t\t<App />\n\t</Router>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}